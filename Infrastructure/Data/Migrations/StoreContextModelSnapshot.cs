// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(StoreContext))]
    partial class StoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Entities.OrderAggregate.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("DtmCrt")
                        .HasColumnName("DtmCrt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("State")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Street")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Zipcode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("AddressId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Core.Entities.OrderAggregate.DeliveryMethod", b =>
                {
                    b.Property<int>("DeliveryMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DeliveryTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("DtmCrt")
                        .HasColumnName("DtmCrt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("ShortName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("DeliveryMethodId");

                    b.ToTable("DeliveryMethods");
                });

            modelBuilder.Entity("Core.Entities.OrderAggregate.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BuyerEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("DeliveryMethodId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DtmCrt")
                        .HasColumnName("DtmCrt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("OrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ShipToAddressAddressId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("OrderId");

                    b.HasIndex("DeliveryMethodId");

                    b.HasIndex("ShipToAddressAddressId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Core.Entities.OrderAggregate.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("DtmCrt")
                        .HasColumnName("DtmCrt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ProductItemId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UnitOfMeasurementName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Core.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("DtmCrt")
                        .HasColumnName("DtmCrt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsUseVariant")
                        .HasColumnName("IsUseVariant")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnName("PictureUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnName("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("UnitOfMeasurementId")
                        .HasColumnName("UnitOfMeasurementId")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasColumnName("Weight")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("UnitOfMeasurementId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Core.Entities.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DtmCrt")
                        .HasColumnName("DtmCrt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnName("ParentCategoryId")
                        .HasColumnType("int");

                    b.HasKey("ProductCategoryId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("Core.Entities.ProductDetail", b =>
                {
                    b.Property<int>("ProductDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductDetailId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DtmCrt")
                        .HasColumnName("DtmCrt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Price")
                        .HasColumnName("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductVariantId")
                        .HasColumnName("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnName("SKU")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ProductDetailId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("ProductDetail");
                });

            modelBuilder.Entity("Core.Entities.ProductVariant", b =>
                {
                    b.Property<int>("ProductVariantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DtmCrt")
                        .HasColumnName("DtmCrt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FirstVariantTypeMemberId")
                        .HasColumnName("FirstVariantTypeMemberId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnName("ShortName")
                        .HasColumnType("int");

                    b.Property<int?>("SecondVariantTypeMemberId")
                        .HasColumnName("SecondVariantTypeMemberId")
                        .HasColumnType("int");

                    b.HasKey("ProductVariantId");

                    b.HasIndex("FirstVariantTypeMemberId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SecondVariantTypeMemberId");

                    b.ToTable("ProductVariant");
                });

            modelBuilder.Entity("Core.Entities.UnitOfMeasurement", b =>
                {
                    b.Property<int>("UnitOfMeasurementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UnitOfMeasurementId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DtmCrt")
                        .HasColumnName("DtmCrt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnName("ShortName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UnitOfMeasurementId");

                    b.ToTable("UnitOfMeasurement");
                });

            modelBuilder.Entity("Core.Entities.VariantType", b =>
                {
                    b.Property<int>("VariantTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VariantTypeId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DtmCrt")
                        .HasColumnName("DtmCrt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("VariantTypeId");

                    b.HasIndex("VariantTypeId");

                    b.ToTable("VariantType");
                });

            modelBuilder.Entity("Core.Entities.VariantTypeMember", b =>
                {
                    b.Property<int>("VariantTypeMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VariantTypeMemberId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DtmCrt")
                        .HasColumnName("DtmCrt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("VariantTypeId")
                        .HasColumnName("VariantTypeId")
                        .HasColumnType("int");

                    b.HasKey("VariantTypeMemberId");

                    b.HasIndex("VariantTypeId");

                    b.ToTable("VariantTypeMember");
                });

            modelBuilder.Entity("Core.Entities.OrderAggregate.Order", b =>
                {
                    b.HasOne("Core.Entities.OrderAggregate.DeliveryMethod", "DeliveryMethod")
                        .WithMany()
                        .HasForeignKey("DeliveryMethodId");

                    b.HasOne("Core.Entities.OrderAggregate.Address", "ShipToAddress")
                        .WithMany()
                        .HasForeignKey("ShipToAddressAddressId");
                });

            modelBuilder.Entity("Core.Entities.OrderAggregate.OrderItem", b =>
                {
                    b.HasOne("Core.Entities.OrderAggregate.Order", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("Core.Entities.Product", b =>
                {
                    b.HasOne("Core.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Product")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.UnitOfMeasurement", "UnitOfMeasurement")
                        .WithMany("Product")
                        .HasForeignKey("UnitOfMeasurementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.ProductCategory", b =>
                {
                    b.HasOne("Core.Entities.ProductCategory", "ParentCategory")
                        .WithMany("ChildCategory")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.ProductDetail", b =>
                {
                    b.HasOne("Core.Entities.Product", "Product")
                        .WithMany("ProductDetail")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.ProductVariant", "ProductVariant")
                        .WithMany("ProductDetail")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.ProductVariant", b =>
                {
                    b.HasOne("Core.Entities.VariantTypeMember", "FirstVariantTypeMember")
                        .WithMany("FirstVariantTypeMember")
                        .HasForeignKey("FirstVariantTypeMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Product", "Product")
                        .WithMany("ProductVariant")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.VariantTypeMember", "SecondVariantTypeMember")
                        .WithMany("SecondVariantTypeMember")
                        .HasForeignKey("SecondVariantTypeMemberId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.VariantTypeMember", b =>
                {
                    b.HasOne("Core.Entities.VariantType", "VariantType")
                        .WithMany("VariantTypeMember")
                        .HasForeignKey("VariantTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
